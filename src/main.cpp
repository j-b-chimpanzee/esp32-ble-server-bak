/*********
  Testing BLE server for BAK device sensor

  github issues with permissions: https://www.jcchouinard.com/github-vscode-2fa-personal-access-token/
*********/

#include <BLEDevice.h>
#include <BLEServer.h>
#include <BLEUtils.h>
#include <BLE2902.h>
#include <Wire.h>
#include <Arduino.h>


//BLE server name
#define bleServerName "BAK_BT_Test"

BLEServer *pServer = NULL;//added

// Timer variables
unsigned long lastTime = 0;
unsigned long timerDelay = 3000;//3 seconds

bool deviceConnected = false;
bool oldDeviceConnected = false;//added

// See the following for generating UUIDs:
// https://www.uuidgenerator.net/
#define SERVICE_UUID "c6be57e1-c336-4b78-9288-a53a986bfb29"

// Temperature Characteristic and Descriptor
  BLECharacteristic bmeDataSetCharacteristics("a0cfb074-9886-4192-bdef-7a77722f317c",  BLECharacteristic::PROPERTY_READ);//BLECharacteristic::PROPERTY_NOTIFY |
  BLEDescriptor bmeDataSetDescriptor(BLEUUID((uint16_t)0x2902));

// Messparameter Characteristic and Descriptor
BLECharacteristic writeCharacteristics("adb0b88d-052d-4b15-96d8-387f4b15f261", BLECharacteristic::PROPERTY_WRITE_NR);
BLEDescriptor bmeMessaParamDescriptor(BLEUUID((uint16_t)0x2903));

//Setup callbacks onConnect and onDisconnect
class MyServerCallbacks: public BLEServerCallbacks {
  void onConnect(BLEServer* pServer) {
    deviceConnected = true;
  };
  void onDisconnect(BLEServer* pServer) {
    deviceConnected = false;
  }
};

void checkToReconnect() //added
{
  // disconnected so advertise
  if (!deviceConnected && oldDeviceConnected) {
    delay(500); // give the bluetooth stack the chance to get things ready
    pServer->startAdvertising(); // restart advertising
    Serial.println("Disconnected: start advertising");
    oldDeviceConnected = deviceConnected;
  }
  // connected so reset boolean control
  if (deviceConnected && !oldDeviceConnected) {
    // do stuff here on connecting
    Serial.println("Reconnected");
    oldDeviceConnected = deviceConnected;
  }
}

void setup() {
  // Start serial communication 
  Serial.begin(115200);

  // Create the BLE Device
  BLEDevice::init(bleServerName);

  // Create the BLE Server
  BLEServer *pServer = BLEDevice::createServer();
  pServer->setCallbacks(new MyServerCallbacks());

  // Create the BLE Service
  BLEService *bmeService = pServer->createService(SERVICE_UUID);

  // Create BLE Characteristics and Create a BLE Descriptor
  
  // Messparameter
  bmeService->addCharacteristic(&writeCharacteristics);
  //bmeMessaParamDescriptor.setValue("BAK Param Characteristic");
  //bmeMessParamCharacteristics.addDescriptor(new BLE2902());



  // DataSet
    bmeService->addCharacteristic(&bmeDataSetCharacteristics);
    //bmeDataSetDescriptor.setValue("Testing values from ESP32");
    //bmeDataSetCharacteristics.addDescriptor(&bmeDataSetDescriptor);

  
  // Start the service
  bmeService->start();

  // Start advertising
  BLEAdvertising *pAdvertising = BLEDevice::getAdvertising();
  pAdvertising->addServiceUUID(SERVICE_UUID);
  pServer->getAdvertising()->start();
  Serial.println("Waiting a client connection to notify...");
}

void loop() {

  checkToReconnect();
  if (deviceConnected) {
    if ((millis() - lastTime) > timerDelay) {

      //Wait with Write No response -> reading from BLE client
      //uint8_t array[26] = {0x42,0x41,0x4b,0x2d,0x32,0x33,0x30,0x31,0x00,0x01,0x13,0x01,0x17,0x0a,0x19,0x0b,0x2d,0x01,0x01,0x01,0x5e,0x00,0x26,0x02,0x58,0x00};
      std::string value = writeCharacteristics.getValue();
      //writeCharacteristics.notify();   
      Serial.print("Read value:");
      //String strr = (char*)array;
      Serial.print(value.c_str());
      Serial.println("\n");

      //Notify dataSet reading from BME sensor
      uint8_t array2[128] = {0x42,0x41,0x4b,0x2d,0x32,0x33,0x30,0x31,0x01,0x00,0x0E,0x08,0x17,0x0D,0x30,0x0D,0x31,0xBD,0x02,0x04,0x01,0x19,0x00,0x19,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0x6D,0x00,0x00,0x00,0x2A,0x02,0x6D,0x00,0x00,0x00,0x2A,0x02,0x6C,0x00,0x00,0x00,0x2A,0x02,0x6A,0x00,0x00,0x00,0xFE,0x01,0x6C,0x00,0x00,0x00,0x17,0x02,0x6D,0x00,0x00,0x00,0x24,0x02,0x6E,0x00,0x00,0x00,0x24,0x02,0x6D,0x00,0x00,0x00,0x18,0x02,0x6E,0x00,0x00,0x00,0x17,0x02,0x6E,0x00,0x18,0x00,0x0B,0x02,0x6F,0x00,0x16,0x00,0x49,0x02,0x75,0x00,0x16,0x00,0x3C,0x02,0x7A,0x00,0x17,0x00,0x2B,0x02,0x7B,0x00,0x17,0x00,0x18,0x02,0x7D,0x00,0x17,0x00,0x0C,0x02,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF};
      uint8_t array3[128] = {0x42,0x41,0x4b,0x2d,0x32,0x33,0x30,0x32,0x02,0x00,0x0E,0x08,0x17,0x0E,0x0E,0x0E,0x23,0xBC,0x02,0x2C,0x01,0x1E,0x00,0x1E,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0x33,0x01,0x00,0x00,0x22,0x02,0x33,0x01,0x00,0x00,0x2F,0x02,0x36,0x01,0x00,0x00,0x2F,0x02,0x3E,0x01,0x00,0x00,0x2F,0x02,0x41,0x01,0x00,0x00,0x32,0x02,0x42,0x01,0x07,0x00,0x12,0x02,0x41,0x01,0x1D,0x00,0x19,0x02,0x42,0x01,0x1E,0x00,0x26,0x02,0x45,0x01,0x1E,0x00,0x3B,0x02,0x45,0x01,0x1E,0x00,0x38,0x02,0x47,0x01,0x1E,0x00,0x38,0x02,0x46,0x01,0x1E,0x00,0x13,0x02,0x46,0x01,0x1E,0x00,0x26,0x02,0x46,0x01,0x1E,0x00,0x19,0x02,0x48,0x01,0x1E,0x00,0x17,0x02,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF};
      uint8_t array4[128] = {0x42,0x41,0x4b,0x2d,0x32,0x33,0x30,0x33,0x03,0x00,0x0B,0x08,0x17,0x07,0x32,0x07,0x32,0xE9,0x00,0x2C,0x01,0x14,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x14,0x01,0x14,0x00,0x00,0x00,0x14,0x01,0x14,0x00,0x00,0x00,0x11,0x01,0x14,0x00,0x00,0x00,0x10,0x01,0x14,0x00,0x00,0x00,0x0F,0x01,0x14,0x00,0x00,0x00,0x11,0x01,0x14,0x00,0x00,0x00,0x11,0x01,0x14,0x00,0x00,0x00,0x12,0x01,0x14,0x00,0x00,0x00,0x12,0x01,0x14,0x00,0x00,0x00,0x0F,0x01,0x14,0x00,0x00,0x00,0x10,0x01,0x14,0x00,0x00,0x00,0x10,0x01,0x14,0x00,0x00,0x00,0x0D,0x01,0x14,0x00,0x00,0x00,0x0E,0x01,0x14,0x00,0x00,0x00,0x0E,0x01,0x14,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF};
      uint8_t array_data[128];
      
      if (value == "1") {
          memcpy(array_data, array2, 128);
          
      } else if (value == "2") {
          memcpy(array_data, array3, 128);
          
      } else if (value == "3") {
        memcpy(array_data, array4, 128);
      } else {
        memcpy(array_data, array2, 128);
      }

      bmeDataSetCharacteristics.setValue(array_data, 128);
      bmeDataSetCharacteristics.notify();
      Serial.print("Sending values:");
      String str = (char*)array_data;
      Serial.print(str);
      Serial.print("\n");
      
      
      lastTime = millis();
    }
  } else {
    //no connected
  }
}